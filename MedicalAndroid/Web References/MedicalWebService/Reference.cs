//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace MedicalAndroid.MedicalWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MedicalWebServiceSoap", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MarshalByRefObject))]
    public partial class MedicalWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback PatientsListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMedicalTestTypesesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddMedicalTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTestResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback PatientSoftDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientOperationCompleted;
        
        private System.Threading.SendOrPostCallback PatientMedicalTestsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AllMedicalTestsOperationCompleted;
        
        private System.Threading.SendOrPostCallback NextMedicalTestsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTestResoultOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoctorsListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDoctorOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveChangesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMedicalTestOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MedicalWebService() {
            this.Url = "http://localhost:59231/MedicalWebService.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event PatientsListCompletedEventHandler PatientsListCompleted;
        
        /// <remarks/>
        public event GetMedicalTestTypesesCompletedEventHandler GetMedicalTestTypesesCompleted;
        
        /// <remarks/>
        public event AddMedicalTestCompletedEventHandler AddMedicalTestCompleted;
        
        /// <remarks/>
        public event AddTestResultCompletedEventHandler AddTestResultCompleted;
        
        /// <remarks/>
        public event PatientSoftDeleteCompletedEventHandler PatientSoftDeleteCompleted;
        
        /// <remarks/>
        public event GetPatientCompletedEventHandler GetPatientCompleted;
        
        /// <remarks/>
        public event PatientMedicalTestsCompletedEventHandler PatientMedicalTestsCompleted;
        
        /// <remarks/>
        public event AllMedicalTestsCompletedEventHandler AllMedicalTestsCompleted;
        
        /// <remarks/>
        public event NextMedicalTestsCompletedEventHandler NextMedicalTestsCompleted;
        
        /// <remarks/>
        public event GetTestResoultCompletedEventHandler GetTestResoultCompleted;
        
        /// <remarks/>
        public event DoctorsListCompletedEventHandler DoctorsListCompleted;
        
        /// <remarks/>
        public event GetDoctorCompletedEventHandler GetDoctorCompleted;
        
        /// <remarks/>
        public event SaveChangesCompletedEventHandler SaveChangesCompleted;
        
        /// <remarks/>
        public event GetMedicalTestCompletedEventHandler GetMedicalTestCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PatientsList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PatientToSend[] PatientsList() {
            object[] results = this.Invoke("PatientsList", new object[0]);
            return ((PatientToSend[])(results[0]));
        }
        
        /// <remarks/>
        public void PatientsListAsync() {
            this.PatientsListAsync(null);
        }
        
        /// <remarks/>
        public void PatientsListAsync(object userState) {
            if ((this.PatientsListOperationCompleted == null)) {
                this.PatientsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPatientsListOperationCompleted);
            }
            this.InvokeAsync("PatientsList", new object[0], this.PatientsListOperationCompleted, userState);
        }
        
        private void OnPatientsListOperationCompleted(object arg) {
            if ((this.PatientsListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PatientsListCompleted(this, new PatientsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMedicalTestTypeses", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetMedicalTestTypeses() {
            object[] results = this.Invoke("GetMedicalTestTypeses", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMedicalTestTypesesAsync() {
            this.GetMedicalTestTypesesAsync(null);
        }
        
        /// <remarks/>
        public void GetMedicalTestTypesesAsync(object userState) {
            if ((this.GetMedicalTestTypesesOperationCompleted == null)) {
                this.GetMedicalTestTypesesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMedicalTestTypesesOperationCompleted);
            }
            this.InvokeAsync("GetMedicalTestTypeses", new object[0], this.GetMedicalTestTypesesOperationCompleted, userState);
        }
        
        private void OnGetMedicalTestTypesesOperationCompleted(object arg) {
            if ((this.GetMedicalTestTypesesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMedicalTestTypesesCompleted(this, new GetMedicalTestTypesesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddMedicalTest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MedicalTest AddMedicalTest(MedicalTest test) {
            object[] results = this.Invoke("AddMedicalTest", new object[] {
                        test});
            return ((MedicalTest)(results[0]));
        }
        
        /// <remarks/>
        public void AddMedicalTestAsync(MedicalTest test) {
            this.AddMedicalTestAsync(test, null);
        }
        
        /// <remarks/>
        public void AddMedicalTestAsync(MedicalTest test, object userState) {
            if ((this.AddMedicalTestOperationCompleted == null)) {
                this.AddMedicalTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMedicalTestOperationCompleted);
            }
            this.InvokeAsync("AddMedicalTest", new object[] {
                        test}, this.AddMedicalTestOperationCompleted, userState);
        }
        
        private void OnAddMedicalTestOperationCompleted(object arg) {
            if ((this.AddMedicalTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddMedicalTestCompleted(this, new AddMedicalTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddTestResult", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddTestResult(TestResoult result) {
            object[] results = this.Invoke("AddTestResult", new object[] {
                        result});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddTestResultAsync(TestResoult result) {
            this.AddTestResultAsync(result, null);
        }
        
        /// <remarks/>
        public void AddTestResultAsync(TestResoult result, object userState) {
            if ((this.AddTestResultOperationCompleted == null)) {
                this.AddTestResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTestResultOperationCompleted);
            }
            this.InvokeAsync("AddTestResult", new object[] {
                        result}, this.AddTestResultOperationCompleted, userState);
        }
        
        private void OnAddTestResultOperationCompleted(object arg) {
            if ((this.AddTestResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTestResultCompleted(this, new AddTestResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PatientSoftDelete", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PatientSoftDelete(int id) {
            this.Invoke("PatientSoftDelete", new object[] {
                        id});
        }
        
        /// <remarks/>
        public void PatientSoftDeleteAsync(int id) {
            this.PatientSoftDeleteAsync(id, null);
        }
        
        /// <remarks/>
        public void PatientSoftDeleteAsync(int id, object userState) {
            if ((this.PatientSoftDeleteOperationCompleted == null)) {
                this.PatientSoftDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPatientSoftDeleteOperationCompleted);
            }
            this.InvokeAsync("PatientSoftDelete", new object[] {
                        id}, this.PatientSoftDeleteOperationCompleted, userState);
        }
        
        private void OnPatientSoftDeleteOperationCompleted(object arg) {
            if ((this.PatientSoftDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PatientSoftDeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPatient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PatientToSend GetPatient(int id) {
            object[] results = this.Invoke("GetPatient", new object[] {
                        id});
            return ((PatientToSend)(results[0]));
        }
        
        /// <remarks/>
        public void GetPatientAsync(int id) {
            this.GetPatientAsync(id, null);
        }
        
        /// <remarks/>
        public void GetPatientAsync(int id, object userState) {
            if ((this.GetPatientOperationCompleted == null)) {
                this.GetPatientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientOperationCompleted);
            }
            this.InvokeAsync("GetPatient", new object[] {
                        id}, this.GetPatientOperationCompleted, userState);
        }
        
        private void OnGetPatientOperationCompleted(object arg) {
            if ((this.GetPatientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientCompleted(this, new GetPatientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PatientMedicalTests", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MedicalTest[] PatientMedicalTests(int patientId) {
            object[] results = this.Invoke("PatientMedicalTests", new object[] {
                        patientId});
            return ((MedicalTest[])(results[0]));
        }
        
        /// <remarks/>
        public void PatientMedicalTestsAsync(int patientId) {
            this.PatientMedicalTestsAsync(patientId, null);
        }
        
        /// <remarks/>
        public void PatientMedicalTestsAsync(int patientId, object userState) {
            if ((this.PatientMedicalTestsOperationCompleted == null)) {
                this.PatientMedicalTestsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPatientMedicalTestsOperationCompleted);
            }
            this.InvokeAsync("PatientMedicalTests", new object[] {
                        patientId}, this.PatientMedicalTestsOperationCompleted, userState);
        }
        
        private void OnPatientMedicalTestsOperationCompleted(object arg) {
            if ((this.PatientMedicalTestsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PatientMedicalTestsCompleted(this, new PatientMedicalTestsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AllMedicalTests", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MedicalTest[] AllMedicalTests() {
            object[] results = this.Invoke("AllMedicalTests", new object[0]);
            return ((MedicalTest[])(results[0]));
        }
        
        /// <remarks/>
        public void AllMedicalTestsAsync() {
            this.AllMedicalTestsAsync(null);
        }
        
        /// <remarks/>
        public void AllMedicalTestsAsync(object userState) {
            if ((this.AllMedicalTestsOperationCompleted == null)) {
                this.AllMedicalTestsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAllMedicalTestsOperationCompleted);
            }
            this.InvokeAsync("AllMedicalTests", new object[0], this.AllMedicalTestsOperationCompleted, userState);
        }
        
        private void OnAllMedicalTestsOperationCompleted(object arg) {
            if ((this.AllMedicalTestsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AllMedicalTestsCompleted(this, new AllMedicalTestsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/NextMedicalTests", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MedicalTest[] NextMedicalTests() {
            object[] results = this.Invoke("NextMedicalTests", new object[0]);
            return ((MedicalTest[])(results[0]));
        }
        
        /// <remarks/>
        public void NextMedicalTestsAsync() {
            this.NextMedicalTestsAsync(null);
        }
        
        /// <remarks/>
        public void NextMedicalTestsAsync(object userState) {
            if ((this.NextMedicalTestsOperationCompleted == null)) {
                this.NextMedicalTestsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNextMedicalTestsOperationCompleted);
            }
            this.InvokeAsync("NextMedicalTests", new object[0], this.NextMedicalTestsOperationCompleted, userState);
        }
        
        private void OnNextMedicalTestsOperationCompleted(object arg) {
            if ((this.NextMedicalTestsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NextMedicalTestsCompleted(this, new NextMedicalTestsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTestResoult", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TestResoult GetTestResoult(int testId) {
            object[] results = this.Invoke("GetTestResoult", new object[] {
                        testId});
            return ((TestResoult)(results[0]));
        }
        
        /// <remarks/>
        public void GetTestResoultAsync(int testId) {
            this.GetTestResoultAsync(testId, null);
        }
        
        /// <remarks/>
        public void GetTestResoultAsync(int testId, object userState) {
            if ((this.GetTestResoultOperationCompleted == null)) {
                this.GetTestResoultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTestResoultOperationCompleted);
            }
            this.InvokeAsync("GetTestResoult", new object[] {
                        testId}, this.GetTestResoultOperationCompleted, userState);
        }
        
        private void OnGetTestResoultOperationCompleted(object arg) {
            if ((this.GetTestResoultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTestResoultCompleted(this, new GetTestResoultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DoctorsList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Doctor[] DoctorsList() {
            object[] results = this.Invoke("DoctorsList", new object[0]);
            return ((Doctor[])(results[0]));
        }
        
        /// <remarks/>
        public void DoctorsListAsync() {
            this.DoctorsListAsync(null);
        }
        
        /// <remarks/>
        public void DoctorsListAsync(object userState) {
            if ((this.DoctorsListOperationCompleted == null)) {
                this.DoctorsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoctorsListOperationCompleted);
            }
            this.InvokeAsync("DoctorsList", new object[0], this.DoctorsListOperationCompleted, userState);
        }
        
        private void OnDoctorsListOperationCompleted(object arg) {
            if ((this.DoctorsListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoctorsListCompleted(this, new DoctorsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDoctor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Doctor GetDoctor(int doctorId) {
            object[] results = this.Invoke("GetDoctor", new object[] {
                        doctorId});
            return ((Doctor)(results[0]));
        }
        
        /// <remarks/>
        public void GetDoctorAsync(int doctorId) {
            this.GetDoctorAsync(doctorId, null);
        }
        
        /// <remarks/>
        public void GetDoctorAsync(int doctorId, object userState) {
            if ((this.GetDoctorOperationCompleted == null)) {
                this.GetDoctorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDoctorOperationCompleted);
            }
            this.InvokeAsync("GetDoctor", new object[] {
                        doctorId}, this.GetDoctorOperationCompleted, userState);
        }
        
        private void OnGetDoctorOperationCompleted(object arg) {
            if ((this.GetDoctorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDoctorCompleted(this, new GetDoctorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveChanges", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveChanges(MedicalTest medicalTest, TestResoult testResoult) {
            this.Invoke("SaveChanges", new object[] {
                        medicalTest,
                        testResoult});
        }
        
        /// <remarks/>
        public void SaveChangesAsync(MedicalTest medicalTest, TestResoult testResoult) {
            this.SaveChangesAsync(medicalTest, testResoult, null);
        }
        
        /// <remarks/>
        public void SaveChangesAsync(MedicalTest medicalTest, TestResoult testResoult, object userState) {
            if ((this.SaveChangesOperationCompleted == null)) {
                this.SaveChangesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveChangesOperationCompleted);
            }
            this.InvokeAsync("SaveChanges", new object[] {
                        medicalTest,
                        testResoult}, this.SaveChangesOperationCompleted, userState);
        }
        
        private void OnSaveChangesOperationCompleted(object arg) {
            if ((this.SaveChangesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveChangesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMedicalTest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MedicalTest GetMedicalTest(int id) {
            object[] results = this.Invoke("GetMedicalTest", new object[] {
                        id});
            return ((MedicalTest)(results[0]));
        }
        
        /// <remarks/>
        public void GetMedicalTestAsync(int id) {
            this.GetMedicalTestAsync(id, null);
        }
        
        /// <remarks/>
        public void GetMedicalTestAsync(int id, object userState) {
            if ((this.GetMedicalTestOperationCompleted == null)) {
                this.GetMedicalTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMedicalTestOperationCompleted);
            }
            this.InvokeAsync("GetMedicalTest", new object[] {
                        id}, this.GetMedicalTestOperationCompleted, userState);
        }
        
        private void OnGetMedicalTestOperationCompleted(object arg) {
            if ((this.GetMedicalTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMedicalTestCompleted(this, new GetMedicalTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class PatientToSend {
        
        private int idField;
        
        private string nameField;
        
        private string dateOfBirthField;
        
        private string peselField;
        
        private byte[] patientImageField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string DateOfBirth {
            get {
                return this.dateOfBirthField;
            }
            set {
                this.dateOfBirthField = value;
            }
        }
        
        /// <remarks/>
        public string Pesel {
            get {
                return this.peselField;
            }
            set {
                this.peselField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] PatientImage {
            get {
                return this.patientImageField;
            }
            set {
                this.patientImageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Doctor {
        
        private int idField;
        
        private string nameField;
        
        private SpecializationList specializationField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public SpecializationList Specialization {
            get {
                return this.specializationField;
            }
            set {
                this.specializationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum SpecializationList {
        
        /// <remarks/>
        Ophthalmologist,
        
        /// <remarks/>
        Radiologist,
        
        /// <remarks/>
        Neurologist,
        
        /// <remarks/>
        Pathologist,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class TestResoult {
        
        private int idField;
        
        private int medicalTestIdField;
        
        private MedicalTest medicalTestField;
        
        private int doctorIdField;
        
        private Doctor doctorField;
        
        private string testDescriptionField;
        
        private bool ispPositiveField;
        
        private string resultField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int MedicalTestId {
            get {
                return this.medicalTestIdField;
            }
            set {
                this.medicalTestIdField = value;
            }
        }
        
        /// <remarks/>
        public MedicalTest MedicalTest {
            get {
                return this.medicalTestField;
            }
            set {
                this.medicalTestField = value;
            }
        }
        
        /// <remarks/>
        public int DoctorId {
            get {
                return this.doctorIdField;
            }
            set {
                this.doctorIdField = value;
            }
        }
        
        /// <remarks/>
        public Doctor Doctor {
            get {
                return this.doctorField;
            }
            set {
                this.doctorField = value;
            }
        }
        
        /// <remarks/>
        public string TestDescription {
            get {
                return this.testDescriptionField;
            }
            set {
                this.testDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public bool IspPositive {
            get {
                return this.ispPositiveField;
            }
            set {
                this.ispPositiveField = value;
            }
        }
        
        /// <remarks/>
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class MedicalTest {
        
        private int idField;
        
        private int patientIdField;
        
        private Patient patientField;
        
        private int testResoultIdField;
        
        private TestResoult testResoultField;
        
        private MedicalTestTypes medicalTestTypesField;
        
        private System.DateTime dateTimeField;
        
        private bool isDoneField;
        
        private bool isDeleteField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int PatientId {
            get {
                return this.patientIdField;
            }
            set {
                this.patientIdField = value;
            }
        }
        
        /// <remarks/>
        public Patient Patient {
            get {
                return this.patientField;
            }
            set {
                this.patientField = value;
            }
        }
        
        /// <remarks/>
        public int TestResoultId {
            get {
                return this.testResoultIdField;
            }
            set {
                this.testResoultIdField = value;
            }
        }
        
        /// <remarks/>
        public TestResoult TestResoult {
            get {
                return this.testResoultField;
            }
            set {
                this.testResoultField = value;
            }
        }
        
        /// <remarks/>
        public MedicalTestTypes MedicalTestTypes {
            get {
                return this.medicalTestTypesField;
            }
            set {
                this.medicalTestTypesField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateTime {
            get {
                return this.dateTimeField;
            }
            set {
                this.dateTimeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDone {
            get {
                return this.isDoneField;
            }
            set {
                this.isDoneField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDelete {
            get {
                return this.isDeleteField;
            }
            set {
                this.isDeleteField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Patient {
        
        private int idField;
        
        private string nameField;
        
        private string dateOfBirthField;
        
        private string peselField;
        
        private Image patientImageField;
        
        private bool isDeletField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string DateOfBirth {
            get {
                return this.dateOfBirthField;
            }
            set {
                this.dateOfBirthField = value;
            }
        }
        
        /// <remarks/>
        public string Pesel {
            get {
                return this.peselField;
            }
            set {
                this.peselField = value;
            }
        }
        
        /// <remarks/>
        public Image PatientImage {
            get {
                return this.patientImageField;
            }
            set {
                this.patientImageField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDelet {
            get {
                return this.isDeletField;
            }
            set {
                this.isDeletField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public abstract partial class Image : MarshalByRefObject {
        
        private object tagField;
        
        private ColorPalette paletteField;
        
        /// <remarks/>
        public object Tag {
            get {
                return this.tagField;
            }
            set {
                this.tagField = value;
            }
        }
        
        /// <remarks/>
        public ColorPalette Palette {
            get {
                return this.paletteField;
            }
            set {
                this.paletteField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ColorPalette {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Image))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public abstract partial class MarshalByRefObject {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum MedicalTestTypes {
        
        /// <remarks/>
        BloodTest,
        
        /// <remarks/>
        OphthalmologicalExamination,
        
        /// <remarks/>
        NeurologicalResearch,
        
        /// <remarks/>
        Usg,
        
        /// <remarks/>
        Rtg,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void PatientsListCompletedEventHandler(object sender, PatientsListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PatientsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PatientsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PatientToSend[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PatientToSend[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetMedicalTestTypesesCompletedEventHandler(object sender, GetMedicalTestTypesesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMedicalTestTypesesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMedicalTestTypesesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddMedicalTestCompletedEventHandler(object sender, AddMedicalTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddMedicalTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddMedicalTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MedicalTest Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MedicalTest)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddTestResultCompletedEventHandler(object sender, AddTestResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTestResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddTestResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void PatientSoftDeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetPatientCompletedEventHandler(object sender, GetPatientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPatientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPatientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PatientToSend Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PatientToSend)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void PatientMedicalTestsCompletedEventHandler(object sender, PatientMedicalTestsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PatientMedicalTestsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PatientMedicalTestsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MedicalTest[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MedicalTest[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AllMedicalTestsCompletedEventHandler(object sender, AllMedicalTestsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AllMedicalTestsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AllMedicalTestsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MedicalTest[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MedicalTest[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void NextMedicalTestsCompletedEventHandler(object sender, NextMedicalTestsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NextMedicalTestsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NextMedicalTestsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MedicalTest[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MedicalTest[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetTestResoultCompletedEventHandler(object sender, GetTestResoultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTestResoultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTestResoultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TestResoult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TestResoult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void DoctorsListCompletedEventHandler(object sender, DoctorsListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoctorsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoctorsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Doctor[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Doctor[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetDoctorCompletedEventHandler(object sender, GetDoctorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDoctorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDoctorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Doctor Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Doctor)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SaveChangesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetMedicalTestCompletedEventHandler(object sender, GetMedicalTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMedicalTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMedicalTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MedicalTest Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MedicalTest)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591